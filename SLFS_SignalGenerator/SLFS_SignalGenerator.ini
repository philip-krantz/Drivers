# Instrument driver configuration file.

[General settings]

# The name is shown in all the configuration windows
name: SLFS Signal Generator

# The version string should be updated whenever changes are made to this config file
version: 0.3

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.
driver_path: SLFS_SignalGenerator
interface: TCPIP



[Model and options]
# The option section allow instruments with different options to use the same driver

# List of models supported by this driver
model_str_1: SLFS0218F

# Check instrument model id at startup (True or False). Default is False
check_model: True

# Valid model strings returned by the instrument. Default value = model_str
model_id_1: Sinolink,SLFS0218F

# Installed options (shown as checkbox controls)

# Check instrument options at startup (True or False). Default is False

# If check_options is set to True, define command for getting options

# If check_options is set to True, supply valid id option strings for each option



# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False)
# If False, the driver will not perform any operations (unless there is a custom driver).
use_visa = True
term_char: LF
tcpip_specify_port: True
tcpip_port: 2000

# Reset the interface (not the instrument) at startup (True or False).  Default is False
reset: False

# Time (in seconds) before the timing out while waiting for an instrument response. Default is 5
timeout: 5

# Query instrument errors (True or False).  If True, every command sent to the device will
# be followed by an error query.  This is useful when testing new setups, but may degrade
# performance by slowing down the instrument communication. 
# query_instr_errors: False 

# Bit mask for checking status byte errors (default is 255, include all errors)
# The bits signal the following errors:
# 0: Operation
# 1: Request control
# 2: Query error
# 3: Device error
# 4: Execution error
# 5: Command error
# 6: User request
# 7: Power on
error_bit_mask: 255

# SCPI string to be used when querying for instrument error messages
# error_cmd: :SYST:ERR?

# Initialization commands are sent to the instrument when starting the driver
# *RST will reset the device, *CLS clears the interface
# init: :SYST:ERR:SCPI ON;

# Final commands sent to the instrument when closing the driver
# final: 
# always_read_after_write: True  # Seems useless.
# str_true: 1
# str_false: 0


# Define quantities in sections. This list is a selection of allowed keywords,
# see the manual for a full list of options
#   datatype:      The datatype should be one of DOUBLE, BOOLEAN, COMBO,
#                  STRING, COMPLEX, VECTOR, VECTOR_COMPLEX, PATH or BUTTON.
#   unit:          Quantity unit
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   state_value_n: Value of "state_quant" for which the control is visible
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH 
#   group:         Name of the group where the control belongs.
#   section:       Name of the section where the control belongs.

[Output]
datatype: BOOLEAN
set_cmd: LEVEL:STATE 
get_cmd: LEVEL:STATE?

[Frequency]
unit: Hz
datatype: DOUBLE
def_value: 5.0E9
set_cmd: FREQ <*> Hz
get_cmd: FREQ?

[Level]
unit: dBm
datatype: DOUBLE
def_value: -50
set_cmd: LEVEL <*> dBm
get_cmd: LEVEL?

[REF_10M]
datatype: COMBO
def_value: EXT
combo_def_1: INT
combo_def_2: EXT
cmd_def_1: 0
cmd_def_2: 1
set_cmd: REF_10M:STATE
get_cmd: REF_10M:STATE?
show_in_measurement_dlg: False

[REF_1.6G]
datatype: COMBO
def_value: INT
combo_def_1: INT
combo_def_2: EXT
cmd_def_1: 1
cmd_def_2: 0
set_cmd: REF_1.6G:STATE 
get_cmd: REF_1.6G:STATE?
show_in_measurement_dlg: False